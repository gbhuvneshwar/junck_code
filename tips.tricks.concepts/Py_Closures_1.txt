
Closure (computer science)
========================== 
From Wikipedia, the free

encyclopedia This article is about the programming language concept. For other
unrelated uses of this term, including in mathematics and computer science, see
Closure.  In programming languages, a closure (also lexical closure or function
closure) is a function or reference to a function together with a referencing
environment—a table storing a reference to each of the non-local variables
(also called free variables or upvalues) of that function.[1]

A closure—unlike a plain function pointer—allows a function to access those
non-local variables even when invoked outside its immediate lexical scope.  The
concept of closures was developed in the 1960s and was first fully implemented
in 1975[citation needed] as a language feature in the Scheme programming
language to support lexically scoped first-class functions. The use of closures
is associated with functional programming languages such as Lisp and ML, as
traditional imperative languages such as Algol, C and Pascal do not support
returning nested functions as results from higher-order functions and thus do
not require supporting closures either. Many modern garbage-collected
imperative languages support closures, such as Smalltalk (the first
object-oriented language to do so)[2] and C#.


Example[edit]
=============

The following fragment of Python 3 code defines a function counter with a local
variable x and a nested function increment. This nested function increment has
access to x, which from its point of view is a non-local variable. The function
counter returns a closure containing a reference to the function increment,
which increments non-local variable x.

def counter():
    x = 0
    def increment(y):
        nonlocal x
        x += y
        print(x)
    return increment

The closure returned by counter can be assigned to a variable:

counter1_increment = counter()
counter2_increment = counter()

Invoking increment through the closures will give the following results:

counter1_increment(1)    # prints 1
counter1_increment(7)    # prints 8
counter2_increment(1)    # prints 1
counter1_increment(1)    # prints 9
counter2_increment(1)    # prints 2


Applications[edit]

Closures are used to implement continuation-passing style, and in this manner,
hide state. Constructs such as objects and control structures can thus be
implemented with closures. In some languages, a closure may occur when a
function is defined within another function, and the inner function refers to
local variables of the outer function. At run-time, when the outer function
executes, a closure is formed, consisting of the inner function’s code and
references (the upvalues) to any variables of the outer function required by
the closure.

First-class functions[edit]

Further information: First-class function

Closures typically appear in languages in which functions are first-class
values—in other words, such languages allow functions to be passed as
arguments, returned from function calls, bound to variable names, etc., just
like simpler types such as strings and integers. For example, consider the
following Scheme function:

; Return a list of all books with at least THRESHOLD copies sold.
(define (best-selling-books threshold)
  (filter
    (lambda (book)
      (>= (book-sales book) threshold))
    book-list))

In this example, the lambda expression (lambda (book) (>= (book-sales book)
                                                       threshold)) appears
within the function best-selling-books. When the lambda expression is
evaluated, Scheme creates a closure consisting of the code for the lambda
expression and a reference to the threshold variable, which is a free variable
inside the lambda expression.  The closure is then passed to the filter
function, which calls it repeatedly to determine which books are to be added to
the result list and which are to be discarded. Because the closure itself has a
reference to threshold, it can use that variable each time filter calls it. The
function filter itself might be defined in a completely separate file.  Here is
the same example rewritten in JavaScript, another popular language with support
for closures:

// Return a list of all books with at least 'threshold' copies sold.
function bestSellingBooks(threshold) {
  return bookList.filter(
      function (book) { return book.sales >= threshold; }
    );
}

The function keyword is used here instead of lambda, and an Array.filter
method[9] instead of a global filter function, but otherwise the structure and
the effect of the code are the same.  A function may create a closure and
return it, as in the following example:

// Return a function that approximates the derivative of f
// using an interval of dx, which should be appropriately small.
function derivative(f, dx) {
  return function (x) {
    return (f(x + dx) - f(x)) / dx;
  };
}

Because the closure in this case outlives the scope of the function that
creates it, the variables f and dx live on after the function derivative
returns. In languages without closures, the lifetime of a local variable
coincides with the execution of the scope where that variable is declared. In
languages with closures, variables must continue to exist as long as any
existing closures have references to them. This is most commonly implemented
using some form of garbage collection.  State representation[edit] A closure
can be used to associate a function with a set of "private" variables, which
persist over several invocations of the function. The scope of the variable
encompasses only the closed-over function, so it cannot be accessed from other
program code.  In stateful languages, closures can thus be used to implement
paradigms for state representation and information hiding, since the closure's
upvalues (its closed-over variables) are of indefinite extent, so a value
established in one invocation remains available in the next. Closures used in
this way no longer have referential transparency, and are thus no longer pure
functions; nevertheless, they are commonly used in "near-functional" languages
such as Scheme.  Other uses[edit] Closures have many uses: Because closures
delay evaluation—i.e., they do not "do" anything until they are called—they can
be used to define control structures. For example, all Smalltalk's standard
control structures, including branches (if/then/else) and loops (while and
                                                                 for), are
defined using objects whose methods accept closures. Users can easily define
their own control structures also.  In languages that allow assignment,
multiple functions can be produced that close over the same environment,
enabling them to communicate privately by altering that environment. In Scheme:
    (define foo #f)
(define bar #f)

(let ((secret-message "none"))
  (set! foo (lambda (msg) (set! secret-message msg)))
  (set! bar (lambda () secret-message)))

(display (bar)) ; prints "none"
(newline)
(foo "meet me by the docks at midnight")
(display (bar)) ; prints "meet me by the docks at midnight"

 Closures can be used to implement object systems.[10] Note: Some speakers call
 any data structure that binds a lexical environment a closure, but the term
 usually refers specifically to functions.
