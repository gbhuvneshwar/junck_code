Normally, Python just gets and sets values on attributes without any special processing. 
It’s just basic storage. Sometimes, however, you might want to do more. 
You might need to validate the value that’s being assigned to a value. 
You may want to retrieve a value and cache it for later use,
so that future references don’t have all the overhead.


__get__(self, instance, owner) — This will be called when the attribute is retrieved (value = obj.attr), 
                                 and whatever it returns is what will be given to the code that requested 
                                 the attribute’s value.
__set__(self, instance, value) — This gets called when a value is set to the attribute (obj.attr = 'value'), 
                                 and shouldn’t return anything at all.
__delete__(self, instance) — This is called when the attribute is deleted from an object (del obj.attr)


A data descriptor, like property, can allow for lazy evaluation of attributes based on a simpler state
of the object,allowing instances to use less memory than if you precomputed each possible attribute.

In Depth: What Are Descriptors?
A descriptor is an object with any of the following methods (__get__, __set__, or __delete__), 

Builtin Descriptor Object Examples:

  classmethod
  staticmethod
  property
  functions in general

 Descriptors can become useful in any kind of interaction with a property of an object; 
they can centralize the interaction with the state of an object and
share functionalities like data validation,
 logging or encapsulation improving the code reuse, maintainability and readability of the produced code.


The default behavior for attribute access is to get, set, or delete the attribute from an object’s dictionary.
For instance, a.x has a lookup chain starting with a.__dict__['x'], then type(a).__dict__['x'], and continuing 
through the base classes of type(a) excluding metaclasses.